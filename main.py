import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    gender = State()
    name = State()
    second_name = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
gender_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë¶ –ú–∞–ª—å—á–∏–∫")],
        [KeyboardButton(text="üëß –î–µ–≤–æ—á–∫–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# /start
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã?", reply_markup=gender_kb)
    await state.set_state(Form.gender)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞
async def gender_chosen(message: Message, state: FSMContext):
    if message.text not in ["üë¶ –ú–∞–ª—å—á–∏–∫", "üëß –î–µ–≤–æ—á–∫–∞"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
    await state.update_data(gender=message.text)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    if message.text == "üë¶ –ú–∞–ª—å—á–∏–∫":
        await state.set_state(Form.name)
    else:
        await state.set_state(Form.second_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
async def name_chosen(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏–º—è, <b>{data['name']}</b>!\n"
        f"–¢—ã –≤—ã–±—Ä–∞–ª: {data['gender'].lower()} üòé",
        parse_mode=ParseMode.HTML
    )
    print(11)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏
async def second_name_chosen(message: Message, state: FSMContext):
    await state.update_data(second_name=message.text)
    data = await state.get_data()
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Ñ–∞–º–∏–ª–∏—è, <b>{data['second_name']}</b>!\n"
        f"–¢—ã –≤—ã–±—Ä–∞–ª: {data['gender'].lower()} üòé",
        parse_mode=ParseMode.HTML
    )
    print(22)
    await state.clear()

# /cancel
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–∫–µ–π, –≤—Å—ë —Å–±—Ä–æ—Å–∏–ª. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    dp.message.register(cmd_start, F.text == "/start")
    dp.message.register(cancel_handler, F.text == "/cancel")
    dp.message.register(gender_chosen, Form.gender)
    dp.message.register(name_chosen, Form.name)
    dp.message.register(second_name_chosen, Form.second_name)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
